# -*- coding: utf-8 -*-

import streamlit as st
import pandas as pd
import os
from datetime import datetime
import plotly.express as px
from reportlab.lib.pagesizes import A5
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
import io
import time
from reportlab.lib.units import cm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# --- C√†i ƒë·∫∑t font cho PDF (h·ªó tr·ª£ ti·∫øng Vi·ªát) ---
try:
    pdfmetrics.registerFont(TTFont('Arial', 'arial.ttf'))
    FONT_NAME = 'Arial'
except Exception:
    st.warning("Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font 'Arial.ttf'. PDF s·∫Ω d√πng font m·∫∑c ƒë·ªãnh.")
    FONT_NAME = 'Helvetica'


# --- C√†i ƒë·∫∑t c∆° b·∫£n c·ªßa ·ª©ng d·ª•ng ---
st.set_page_config(layout="wide", page_title="H·ªá Th·ªëng Qu·∫£n L√Ω V√†ng")

# --- H√†m h·ªó tr·ª£ ---
def save_bill(bill_items_data):
    """L∆∞u d·ªØ li·ªáu c√°c m√≥n h√†ng v√†o file data.xlsx."""
    try:
        # T·∫£i d·ªØ li·ªáu c≈© ho·∫∑c t·∫°o DataFrame m·ªõi n·∫øu file ch∆∞a t·ªìn t·∫°i
        if os.path.exists("data.xlsx"):
            df_existing = pd.read_excel("data.xlsx")
        else:
            df_existing = pd.DataFrame(columns=['Ng√†y', 'T√™n Ng∆∞·ªùi B√°n', 'S·ªë CCCD', 'ƒê·ªãa Ch·ªâ', 'C√¢n N·∫∑ng (gram)', 'Lo·∫°i V√†ng', 'ƒê∆°n Gi√° (VND)', 'Th√†nh Ti·ªÅn (VND)'])

        df_new_rows = pd.DataFrame(bill_items_data)
        df_updated = pd.concat([df_existing, df_new_rows], ignore_index=True)
        df_updated.to_excel("data.xlsx", index=False)
        st.success("B·∫£ng k√™ ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!", icon="‚úÖ")
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi l∆∞u b·∫£ng k√™: {e}", icon="‚ùå")

def generate_pdf(bill_data):
    """T·∫°o file PDF t·ª´ d·ªØ li·ªáu b·∫£ng k√™."""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A5, leftMargin=30, rightMargin=30, topMargin=30, bottomMargin=30)
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='TitleStyle', alignment=TA_CENTER, fontSize=14, fontName=FONT_NAME + '-Bold'))
    styles.add(ParagraphStyle(name='SubTitleStyle', alignment=TA_CENTER, fontSize=10, fontName=FONT_NAME))
    styles.add(ParagraphStyle(name='NormalStyle', alignment=TA_CENTER, fontSize=10, fontName=FONT_NAME))
    styles.add(ParagraphStyle(name='Heading1Style', fontSize=12, fontName=FONT_NAME + '-Bold'))
    styles.add(ParagraphStyle(name='NormalLeft', fontSize=10, fontName=FONT_NAME))

    story = []
    
    # Ti√™u ƒë·ªÅ v√† th√¥ng tin chung
    story.append(Paragraph("C·ªòNG HO√Ä X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM", styles['NormalStyle']))
    story.append(Paragraph("ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c", styles['NormalStyle']))
    story.append(Spacer(1, 10))
    story.append(Paragraph("T√™n ƒë∆°n v·ªã: C√¥ng Ty Tr√°ch Nhi·ªám H·ªØu H·∫°n Trang S·ª©c V√†ng Anh ƒê√†o", styles['NormalLeft']))
    story.append(Paragraph("B·∫¢NG K√ä MUA H√ÄNG HO√Å, D·ªäCH V·ª§ C·ª¶A T·ªî CH·ª®C, C√Å NH√ÇN KH√îNG KINH DOANH KH√îNG C√ì HO√Å ƒê∆†N, CH·ª®NG T·ª™", styles['TitleStyle']))
    story.append(Paragraph("(Theo m·∫´u 01/TNDN)", styles['SubTitleStyle']))
    story.append(Spacer(1, 15))

    # Th√¥ng tin ng∆∞·ªùi b√°n
    story.append(Paragraph(f"T√™n ng∆∞·ªùi b√°n: {bill_data['T√™n Ng∆∞·ªùi B√°n']}", styles['NormalLeft']))
    story.append(Paragraph(f"S·ªë CCCD: {bill_data['S·ªë CCCD']}", styles['NormalLeft']))
    story.append(Paragraph(f"ƒê·ªãa ch·ªâ: {bill_data['ƒê·ªãa Ch·ªâ']}", styles['NormalLeft']))
    story.append(Paragraph(f"Ng√†y: {bill_data['Ng√†y'].strftime('%d/%m/%Y %H:%M:%S')}", styles['NormalLeft']))
    story.append(Spacer(1, 15))

    # B·∫£ng chi ti·∫øt
    data_table = [['C√¢n N·∫∑ng (gram)', 'Lo·∫°i V√†ng', 'ƒê∆°n Gi√° (VND)', 'Th√†nh Ti·ªÅn (VND)']]
    for i in range(len(bill_data['Lo·∫°i V√†ng'])):
        data_table.append([
            f"{bill_data['C√¢n N·∫∑ng (gram)'][i]:,.2f}",
            bill_data['Lo·∫°i V√†ng'][i],
            f"{bill_data['ƒê∆°n Gi√° (VND)'][i]:,.0f}",
            f"{bill_data['Th√†nh Ti·ªÅn (VND)'][i]:,.0f}"
        ])
    
    # Th√™m d√≤ng t·ªïng ti·ªÅn
    total_amount = sum(bill_data['Th√†nh Ti·ªÅn (VND)'])
    data_table.append(['', '', 'T·ªïng C·ªông:', f"{total_amount:,.0f} VND"])

    table_style = TableStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTNAME', (0, 0), (-1, 0), FONT_NAME + '-Bold'),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('FONTNAME', (2, -1), (2, -1), FONT_NAME + '-Bold'),
        ('FONTNAME', (3, -1), (3, -1), FONT_NAME + '-Bold'),
    ])
    
    table = Table(data_table, colWidths=[2.2*cm, 3.5*cm, 3.5*cm, 4.0*cm])
    table.setStyle(table_style)
    story.append(table)
    story.append(Spacer(1, 20))
    story.append(Paragraph(f"T·ªïng s·ªë ti·ªÅn b·∫±ng ch·ªØ: {convert_to_vietnamese_words(total_amount)}", styles['NormalLeft']))
    story.append(Spacer(1, 20))

    # Ch·ªØ k√Ω (s·ª≠ d·ª•ng b·∫£ng ƒë·ªÉ ƒë·∫∑t c·∫°nh nhau)
    signatures = [['Ch·ªØ k√Ω ng∆∞·ªùi b√°n', 'Ch·ªØ k√Ω ng∆∞·ªùi mua']]
    sig_table = Table(signatures, colWidths=[7*cm, 7*cm])
    sig_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('FONTNAME', (0, 0), (-1, -1), FONT_NAME),
    ]))
    story.append(sig_table)
    story.append(Spacer(1, 40))

    try:
        doc.build(story)
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o PDF: {e}")
        return None

    buffer.seek(0)
    return buffer

def convert_to_vietnamese_words(number):
    """Chuy·ªÉn s·ªë th√†nh ch·ªØ ti·∫øng Vi·ªát."""
    
    # ƒê·ªÉ ƒë∆°n gi·∫£n, ch·ªâ x·ª≠ l√Ω ƒë·∫øn h√†ng t·ª∑
    num_str = f"{int(number):,.0f}"
    return f"{num_str.replace(',', '.')} ƒë·ªìng." # ƒê∆°n gi·∫£n h√≥a, b·∫°n c√≥ th·ªÉ t√¨m th∆∞ vi·ªán ho·∫∑c vi·∫øt h√†m ƒë·∫ßy ƒë·ªß h∆°n

# --- ·ª®ng d·ª•ng Streamlit ---
st.title("·ª®ng D·ª•ng Qu·∫£n L√Ω Mua V√†ng")
st.markdown("---")

# ƒêi·ªÅu h∆∞·ªõng trang b·∫±ng session_state
if 'page' not in st.session_state:
    st.session_state.page = "Trang Ch·ªß"
if 'step' not in st.session_state:
    st.session_state.step = 1

if st.session_state.page == "Trang Ch·ªß":
    st.header("Dashboard T·ªïng Quan")

    col1, _ = st.columns([1, 2])
    with col1:
        if st.button("T·∫°o B·∫£ng K√™", width='stretch', type="primary"):
            st.session_state.page = "T·∫°o B·∫£ng K√™"
            st.session_state.step = 1
            st.rerun()

    st.markdown("---")

    # Bi·ªÉu ƒë·ªì th·ªëng k√™ l·ªãch s·ª≠
    st.subheader("Bi·ªÉu ƒë·ªì Th·ªëng K√™ L·ªãch S·ª≠")
    if os.path.exists("data.xlsx"):
        df_history = pd.read_excel("data.xlsx")
        df_history['Ng√†y'] = pd.to_datetime(df_history['Ng√†y'])
        df_history = df_history.sort_values(by='Ng√†y')
        
        # Bi·ªÉu ƒë·ªì t·ªïng ti·ªÅn theo ng√†y
        df_daily_total = df_history.groupby(df_history['Ng√†y'].dt.date)['Th√†nh Ti·ªÅn (VND)'].sum().reset_index()
        fig = px.bar(df_daily_total, x='Ng√†y', y='Th√†nh Ti·ªÅn (VND)', title='T·ªïng Ti·ªÅn Mua V√†ng H√†ng Ng√†y', 
                     labels={'Ng√†y': 'Ng√†y', 'Th√†nh Ti·ªÅn (VND)': 'T·ªïng Ti·ªÅn (VND)'})
        st.plotly_chart(fig, use_container_width=True)

        st.subheader("L·ªãch S·ª≠ Giao D·ªãch")
        
        # S·∫Øp x·∫øp l·∫°i th·ª© t·ª± c·ªôt ƒë·ªÉ d·ªÖ nh√¨n h∆°n
        desired_order = ['Ng√†y', 'T√™n Ng∆∞·ªùi B√°n', 'S·ªë CCCD', 'ƒê·ªãa Ch·ªâ', 'Lo·∫°i V√†ng', 'C√¢n N·∫∑ng (gram)', 'ƒê∆°n Gi√° (VND)', 'Th√†nh Ti·ªÅn (VND)']
        st.dataframe(df_history[desired_order], use_container_width=True)
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu giao d·ªãch n√†o ƒë·ªÉ hi·ªÉn th·ªã.")

    # N√∫t x√≥a d·ªØ li·ªáu
    st.markdown("---")
    st.subheader("Qu·∫£n l√Ω d·ªØ li·ªáu")
    col1, _ = st.columns([1, 2])
    with col1:
        if st.button("X√≥a To√†n B·ªô D·ªØ Li·ªáu", width='stretch', type="secondary"):
            if os.path.exists("data.xlsx"):
                os.remove("data.xlsx")
            st.success("ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu th√†nh c√¥ng!", icon="üóëÔ∏è")
            st.rerun()

elif st.session_state.page == "T·∫°o B·∫£ng K√™":
    st.header("T·∫°o B·∫£ng K√™")
    st.markdown("ƒêi·ªÅn th√¥ng tin v√†o form d∆∞·ªõi ƒë√¢y ƒë·ªÉ t·∫°o b·∫£ng k√™ mua v√†ng.")
    
    if st.session_state.step == 1:
        with st.form("seller_info_form"):
            st.subheader("Th√¥ng tin ng∆∞·ªùi b√°n")
            st.session_state.seller_name = st.text_input("T√™n ng∆∞·ªùi b√°n", value=st.session_state.get('seller_name', ''))
            st.session_state.seller_id = st.text_input("S·ªë CCCD", value=st.session_state.get('seller_id', ''))
            st.session_state.seller_address = st.text_input("ƒê·ªãa ch·ªâ", value=st.session_state.get('seller_address', ''))

            submitted = st.form_submit_button("Ti·∫øp", type="primary", width='stretch')
            if submitted:
                if not st.session_state.seller_name or not st.session_state.seller_id or not st.session_state.seller_address:
                    st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ng∆∞·ªùi b√°n.")
                else:
                    st.session_state.step = 2
                    st.rerun()
    
    elif st.session_state.step == 2:
        with st.form("bill_items_form"):
            st.subheader("Chi ti·∫øt m√≥n h√†ng (T·ªëi ƒëa 5 m√≥n)")
            
            if 'num_items' not in st.session_state:
                st.session_state.num_items = 1

            items = []
            total_amount = 0
            # Danh s√°ch ƒë·ªÉ l∆∞u c√°c m√≥n h√†ng ƒë√£ ƒë∆∞·ª£c "san ph·∫≥ng"
            items_to_save = []

            for i in range(st.session_state.num_items):
                st.markdown(f"**M√≥n h√†ng {i+1}**")
                col1, col2 = st.columns(2)
                with col1:
                    weight = st.number_input(f"C√¢n n·∫∑ng (gram)", min_value=0.0, format="%.2f", key=f"weight_{i}", value=st.session_state.get(f"weight_{i}", 0.0))
                with col2:
                    gold_type = st.selectbox("Lo·∫°i v√†ng", ["V√†ng SJC", "V√†ng 9999", "V√†ng 24K", "V√†ng 18K", "V√†ng Tr·∫Øng"], key=f"gold_type_{i}", index=st.session_state.get(f"gold_type_index_{i}", 0))

                # Nh·∫≠p ƒë∆°n gi√° th·ªß c√¥ng
                manual_price_thousand = st.number_input(
                    "Nh·∫≠p ƒë∆°n gi√° (ngh√¨n VND)",
                    min_value=0,
                    format="%d",
                    key=f"manual_price_{i}",
                    value=st.session_state.get(f"manual_price_{i}", 0)
                )
                unit_price = manual_price_thousand * 1000

                item_amount = weight * unit_price
                total_amount += item_amount
                
                items.append({
                    'weight': weight,
                    'gold_type': gold_type,
                    'unit_price': unit_price,
                    'amount': item_amount
                })

                # Chu·∫©n b·ªã d·ªØ li·ªáu cho vi·ªác l∆∞u v√†o Excel
                items_to_save.append({
                    'Ng√†y': datetime.now(),
                    'T√™n Ng∆∞·ªùi B√°n': st.session_state.seller_name,
                    'S·ªë CCCD': st.session_state.seller_id,
                    'ƒê·ªãa Ch·ªâ': st.session_state.seller_address,
                    'C√¢n N·∫∑ng (gram)': weight,
                    'Lo·∫°i V√†ng': gold_type,
                    'ƒê∆°n Gi√° (VND)': unit_price,
                    'Th√†nh Ti·ªÅn (VND)': item_amount
                })
                st.markdown("---")

            col_add, col_remove, _ = st.columns([1, 1, 4])
            with col_add:
                if st.session_state.num_items < 5:
                    if st.form_submit_button("Th√™m M√≥n H√†ng", type="secondary"):
                        st.session_state.num_items += 1
                        st.rerun()
            with col_remove:
                if st.session_state.num_items > 1:
                    if st.form_submit_button("X√≥a M√≥n H√†ng Cu·ªëi", type="secondary"):
                        st.session_state.num_items -= 1
                        st.rerun()

            st.markdown("<br>", unsafe_allow_html=True)
            st.markdown(f"<h2 style='text-align: center;'>T·ªïng Ti·ªÅn: {total_amount:,.0f} VND</h2>", unsafe_allow_html=True)
            
            col_back, col_submit = st.columns([1, 1])
            with col_back:
                if st.form_submit_button("Quay L·∫°i", type="secondary"):
                    st.session_state.step = 1
                    st.rerun()
            with col_submit:
                submitted = st.form_submit_button("ƒê√£ Chu·∫©n B·ªã Ti·ªÅn", type="primary", width='stretch')

        if submitted:
            vietnam_now = datetime.now()
            
            bill_data = {
                'Ng√†y': vietnam_now,
                'T√™n Ng∆∞·ªùi B√°n': st.session_state.seller_name,
                'S·ªë CCCD': st.session_state.seller_id,
                'ƒê·ªãa Ch·ªâ': st.session_state.seller_address,
                'C√¢n N·∫∑ng (gram)': [item['weight'] for item in items],
                'Lo·∫°i V√†ng': [item['gold_type'] for item in items],
                'ƒê∆°n Gi√° (VND)': [item['unit_price'] for item in items],
                'Th√†nh Ti·ªÅn (VND)': [item['amount'] for item in items]
            }

            # L∆∞u v√†o file Excel
            save_bill(items_to_save)

            # T·∫°o v√† cung c·∫•p file PDF ƒë·ªÉ t·∫£i xu·ªëng
            pdf_file = generate_pdf(bill_data)
            if pdf_file:
                st.download_button(
                    label="T·∫£i Xu·ªëng B·∫£ng K√™ PDF",
                    data=pdf_file,
                    file_name=f"Bang_ke_{st.session_state.seller_name}_{vietnam_now.strftime('%Y%m%d%H%M%S')}.pdf",
                    mime="application/pdf",
                    width='stretch'
                )
            
            # Reset form sau khi l∆∞u th√†nh c√¥ng
            for i in range(st.session_state.num_items):
                del st.session_state[f"weight_{i}"]
                del st.session_state[f"gold_type_{i}"]
                del st.session_state[f"manual_price_{i}"]
                
            del st.session_state.seller_name
            del st.session_state.seller_id
            del st.session_state.seller_address
            st.session_state.num_items = 1
            st.session_state.step = 1
    
    st.markdown("---")
    if st.button("V·ªÅ Trang Ch·ªß", width='stretch'):
        st.session_state.page = "Trang Ch·ªß"
        st.rerun()
